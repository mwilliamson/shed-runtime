module _sequenceItems;

members::
    Nil,
    nil,
    cons,
    isNil,
    SequenceItem

def Nil class() => ::
    members::
        currentItem fun() => nil

val nil = Nil();

def cons fun[T] => (head: T, tail: Sequence[T]) =>
    Cons[T](head, tail);

// TODO: rather than using isNil, should really do a pattern match on Sequence
def isNil fun(sequence: SequenceItem[Any]) =>
    equal(classOf(sequence), Nil)

def Cons class[T] => (head: T, tail: Sequence[T]) => ::
    members::
        head fun() => head,
        tail fun() => tail,
        currentItem fun() => Cons(head, tail)

// TODO: should be SequenceItem = Nil | Cons, where Cons is an interface
def SequenceItem class[T] => () => ::
    pass
