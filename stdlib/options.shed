module options;

members::
    none,
    some

import _sequenceItems;

// TODO: should be an interface

def Option class[T] => () => ::
    pass

val none = object::
    members::
        map fun[R] => (func: Function[Nothing, R]) =>
            none,
            
        orElse fun[T2] => (func: Function[Option[T2]]) =>
            func(),
            
        valueOrElse fun[T2] => (func: Function[T2]) =>
            func(),
            
        currentItem fun() =>
            _sequenceItems.nil,
            
        equals fun(other: Option[Any]) =>
            other.map(fun() => false).valueOrElse(fun() => true)

def some class[T] => (value: T) => ::
    members::
        map fun[R] => (func: Function[T, R]) =>
            some[T](func(value)),
        
        // TODO: need this i.e. need to implement methods to avoid
        // reconstructing the same object (could optimise away for
        // pure constructors, and we probably want to discourage
        // impure constructors anyway
        // Bit of a pain if there are many arguments
        orElse fun[T2] => (func: Function[Option[T2]]) =>
            some[T](value),
            
        valueOrElse fun[T2] => (func: Function[T2]) =>
            value,
            
        currentItem fun() =>
            _sequenceItems.cons[T](value, _sequenceItems.nil),

        // HACK: using value directly fails due to this binding not being
        // resolved correctly
        equals fun(other: Option[T]) => (fun(x: T) =>
            other.map(fun(otherValue: T) => equal(x, otherValue))
                .valueOrElse(fun() => false)
        )(value)
