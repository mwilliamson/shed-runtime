module _sequences;

members {
    Nil,
    nil,
    cons,
    isNil,
    Sequence
}

import _hacks;

def Nil class() => {}
val nil = Nil();

def cons fun[T] => (head: T, tail: Sequence[T]) =>
    Cons[T](head, tail);

// TODO: rather than using isNil, should really do a pattern match on Sequence
def isNil fun(sequence: Sequence[Any]) =>
    _hacks.isSame(sequence, nil);

def Cons class[T] => (head: T, tail: Sequence[T]) => {
    members {
        head fun() => head,
        tail fun() => tail
    }
};

// TODO: should be Sequence = Nil | Cons, where Cons is an interface
def Sequence class[T] => () => {
}
