module sets;

members {
    fromList,
    emptySet
}

import sequenceables;

// TODO: this is horribly inefficient. Write a proper HashSet class
def fromList fun[T] => (list: List[T]) => ListSet[T](list);

def ListSet class[T] => (list: List[T]) => {
    members {
        contains,
        toSequence
    }
    
    def contains fun(value: T) =>
        sequenceables.any[T](fun(element: T) => value.equals(element), list);
        
    def toSequence fun() => list.toSequence();
};

val emptySet = fromList(listOf());
