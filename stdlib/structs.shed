module structs;

members {
    create Struct
}

import lists;
import sequenceables;
import lazySequenceables;
import strings;
    
def Struct class(type: Type, fields: List[Struct]) => {
    members {
        type fun() => type,
        fields fun() => fields,
        _represent,
        equals
    }
    
    def _represent fun() =>
        type.identifier()
            .concat("(")
            .concat(strings.join(", ", lazySequenceables.map(represent, fields)))
            .concat(")")
    
    def equals fun(other: Struct) =>
        if equal(type, other.type()) then
            equalList(fields, other.fields())
        else
            false
        
    def equalList fun(first: List[Struct], second: List[Struct]) =>
        if not(equal(first.length(), second.length())) then
            false
        else
            sequenceables.all(
                pack(equal),
                lists.zip(first, second)
            )
}
