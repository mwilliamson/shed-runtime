import _sequences;

public val options = object {
    public val none = object {
        public def map fun[R] => (func: Function[Nothing, R]) =>
            none;
        
        public def orElse fun[T2] => (func: Function[Option[T2]]) =>
            func();
        
        public def valueOrElse fun[T2] => (func: Function[T2]) =>
            func();
            
        public def toSequence fun() =>
            _sequences.nil;
    };
    
    public def some class[T] => (value: T) => {
        public def map fun[R] => (func: Function[T, R]) =>
            some[T](func(value));
        
        // TODO: need this i.e. need to implement methods to avoid
        // reconstructing the same object (could optimise away for
        // pure constructors, and we probably want to discourage
        // impure constructors anyway
        // Bit of a pain if there are many arguments
        public def orElse fun[T2] => (func: Function[Option[T2]]) =>
            some[T](value);
            
        public def valueOrElse fun[T2] => (func: Function[T2]) =>
            value;
            
        public def toSequence fun() =>
            _sequences.cons[T](value, _sequences.nil);
    };
};
