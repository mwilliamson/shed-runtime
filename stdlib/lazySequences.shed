module lazySequences;

members::
    map,
    filter,
    concat

import sequences;

def map fun[F, T] => (func: Function[F, T], sequence: Sequence[F]) =>
    MappedSequence(func, sequence)

def MappedSequence class[F, T] => (func: Function[F, T], sequence: Sequence[F]) => ::
    members::
        currentItem
    
    def currentItem fun() => let
        val item = sequence.currentItem()
        in if sequences.isNil(item) then
            sequences.nil
        else
            sequences.cons(func(item.head()), map(func, item.tail()))

def filter fun[T] => (predicate: Function[T, Boolean], sequence: Sequence[T]) =>
    FilteredSequence(predicate, sequence)
        
def FilteredSequence class[T] => (predicate: Function[T, Boolean], sequence: Sequence[T]) => ::
    members::
        currentItem
    
    def currentItem fun() => let
        val item = sequence.currentItem()
        in if sequences.isNil(item) then
            sequences.nil
        else let
            val head = item.head()
            in if predicate(head) then
                sequences.cons(head, filter(predicate, item.tail()))
            else
                filter(predicate, item.tail()).currentItem()

def concat fun[T] => (sequenceOfSequences: Sequence[Sequence[T]]) =>
    ConcatSequence(sequenceOfSequences)

def ConcatSequence class[T] => (sequenceOfSequences: Sequence[T]) => ::
    members::
        currentItem,
        head fun() => headSequence.head(),
        tail fun() => concat[T](sequences.cons(
            headSequence.tail(),
            sequenceOfSequences.tail()
        ))
    
    def currentItem fun() => let
        val itemOfSequences = sequenceOfSequences.currentItem()
        in if sequences.isNil(itemOfSequences) then
            sequences.nil
        else let
            val headSequence = itemOfSequences.head().currentItem()
            in if sequences.isNil(headSequence) then
                concat(itemOfSequences.tail()).currentItem()
            else
                sequences.cons(
                    headSequence.head(),
                    ConcatSequence(sequences.cons(headSequence.tail(), itemOfSequences.tail()))
                )
